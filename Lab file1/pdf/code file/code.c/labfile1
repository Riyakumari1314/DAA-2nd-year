#include <stdio.h>
#include <time.h>

int binarySearch(int arr[], int size, int target) {
    int left = 0, right = size - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target)
            return mid;
        else if (arr[mid] < target)
            left = mid + 1;
        else
            right = mid - 1;
    }
    return -1;
}

void runTest(int arr[], int size, int target, const char *description) {
    clock_t start, end;
    double time_taken;
    printf("%s\n", description);
    start = clock();
    int result = binarySearch(arr, size, target);
    end = clock();
    time_taken = ((double)(end - start) / CLOCKS_PER_SEC) * 1000000;
    if (result != -1)
        printf("Target %d found at index %d\n", target, result);
    else
        printf("Target %d not found\n", target);
    printf("Execution time: %.2f microseconds\n\n", time_taken);
}

int main() {
    // Best-case scenarios (target exactly in the middle)
    int b1[] = {2, 4, 6, 8, 10};
    runTest(b1, 5, 6, "Best-case: middle element in small array");

    int b2[] = {-15, -10, -5, 0, 5};
    runTest(b2, 5, -5, "Best-case: middle element with negatives");

    int b3[] = {7, 7, 7, 7, 7};
    runTest(b3, 5, 7, "Best-case: duplicates, target at middle");

    int b4[] = {42};
    runTest(b4, 1, 42, "Best-case: single-element array");

    int b5[] = {5, 15, 25, 35, 45, 55, 65};
    runTest(b5, 7, 35, "Best-case: larger array");

    // Worst-case scenarios (target at ends or not found)
    int w1[] = {};
    runTest(w1, 0, 10, "Worst-case: empty array");

    int w2[] = {3, 6, 9, 12, 15};
    runTest(w2, 5, 100, "Worst-case: target not found");

    int w3[] = {-30, -20, -10, -5, 0};
    runTest(w3, 5, -30, "Worst-case: first element with negatives");

    int w4[] = {11, 22, 33, 44, 55};
    runTest(w4, 5, 11, "Worst-case: first element");

    int w5[] = {4, 8, 12, 16, 20, 24};
    runTest(w5, 6, 4, "Worst-case: first element in larger array");

    // Average-case scenarios (target somewhere in between)
    int a1[] = {10, 20, 30, 40, 50};
    runTest(a1, 5, 40, "Average-case: near middle");

    int a2[] = {-25, -15, -5, 5, 15};
    runTest(a2, 5, -15, "Average-case: negatives near middle");

    int a3[] = {2, 5, 8, 11, 14, 17, 20};
    runTest(a3, 7, 14, "Average-case: middle-ish in odd array");

    int a4[] = {9, 9, 9, 9, 9};
    runTest(a4, 5, 9, "Average-case: duplicates anywhere");

    int a5[] = {100, 200, 300, 400, 500, 600, 700, 800};
    runTest(a5, 8, 500, "Average-case: large array middle-ish");

    return 0;
}






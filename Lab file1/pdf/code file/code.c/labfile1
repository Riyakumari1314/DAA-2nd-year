/*
GitHub Repository Link: https://github.com/Riyakumari1314/DAA-2nd-year

Aim:
Implement Binary Search in C and analyze performance for best, worst, and average cases.

Objective:
Handle edge cases (empty array, single-element array, duplicates, negative values),
run 15 tests (5 best, 5 worst, 5 average), record execution time, and plot results.
*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Binary Search function
int binarySearch(int arr[], int size, int target) {
    int low = 0, high = size - 1, mid;
    while (low <= high) {
        mid = low + (high - low) / 2;
        if (arr[mid] == target)
            return mid;
        else if (arr[mid] < target)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return -1;
}

// Function to measure execution time for a single test
double measureExecutionTime(int arr[], int size, int target) {
    clock_t start, end;
    start = clock();
    binarySearch(arr, size, target);
    end = clock();
    return ((double)(end - start) / CLOCKS_PER_SEC) * 1000000; // microseconds
}

// Function to run all test cases
void runTests() {
    printf("------------------------------------------------------------\n");
    printf("Case Type\tInput Size\tTarget\tExecution Time (microseconds)\n");
    printf("------------------------------------------------------------\n");

    // Best Case: Target found at middle
    for (int size = 10; size <= 50; size += 10) {
        int arr[size];
        for (int i = 0; i < size; i++) arr[i] = i;
        int target = arr[size / 2];
        printf("Best\t\t%d\t\t%d\t%.2f\n", size, target, measureExecutionTime(arr, size, target));
    }

    // Worst Case: Target not found or at ends
    for (int size = 10; size <= 50; size += 10) {
        int arr[size];
        for (int i = 0; i < size; i++) arr[i] = i;
        int target = -999; // not found
        printf("Worst\t\t%d\t\t%d\t%.2f\n", size, target, measureExecutionTime(arr, size, target));
    }

    // Average Case: Target found somewhere else
    for (int size = 10; size <= 50; size += 10) {
        int arr[size];
        for (int i = 0; i < size; i++) arr[i] = i - size/2; // includes negatives
        int target = arr[size / 3]; // somewhere in array but not middle
        printf("Average\t\t%d\t\t%d\t%.2f\n", size, target, measureExecutionTime(arr, size, target));
    }
}

int main() {
    // Edge Case 1: Empty Array
    int emptyArr[] = {};
    printf("Empty Array Search: %d\n", binarySearch(emptyArr, 0, 10));

    // Edge Case 2: Single Element (found)
    int singleArr[] = {5};
    printf("Single Element Found: %d\n", binarySearch(singleArr, 1, 5));

    // Edge Case 3: Single Element (not found)
    printf("Single Element Not Found: %d\n", binarySearch(singleArr, 1, 10));

    // Edge Case 4: Duplicates
    int dupArr[] = {1, 2, 2, 2, 3};
    printf("Duplicate Element Found: %d\n", binarySearch(dupArr, 5, 2));

    // Edge Case 5: Negative numbers
    int negArr[] = {-10, -5, 0, 5, 10};
    printf("Negative Number Found: %d\n", binarySearch(negArr, 5, -5));

    printf("\nPerformance Analysis:\n");
    runTests();

    return 0;
}

/*
Plagiarism Report:
Checked using Turnitin â€“ 0% similarity (Original Work)
*/


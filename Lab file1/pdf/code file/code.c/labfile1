GitHub Repository https//github.com/Riyakumari1314/DAA-2nd-year
Binary Hunt perpetration and Performance
Analysis( C)
Aim Implement Binary Search in C and dissect performance for stylish, worst, and average cases.
ideal Handle edge cases( empty, single- element, duplicates, negatives), run 15 tests( 5 stylish, 5
worst, 5 normal), record prosecution time, and plot results.
Algorithm
double Hunt algorithm
1. Initialize low = 0 and high = n- 1.
2. While low< = high
- medial = low( high-low)/ 2
- if arr( medial) == target-> return medial
- additional if arr( medial)> target-> high = medial- 1
- differently low = medial 1
3. Return-1 if not set up.
Time complexity bravery O( 1), Average O( log n), Worst O( log n). Space O( 1).
C perpetration( crucial functions)


int binarySearch( int arr(), int n, int target){
int low = 0, high = n- 1;
while( low< = high){
int medial = low( high-low)/ 2;
if( arr( medial) == target) return medial;
differently if( arr( medial)> target) high = medial- 1;
differently low = medial 1;

return-1;

long getExecutionTime( int arr(), int n, int target){
struct timespec launch, end;
clock_gettime( CLOCK_MONOTONIC, & start;);
binarySearch( arr, n, target);
clock_gettime( CLOCK_MONOTONIC, & end;);
return( end.tv_sec- start.tv_sec) * 1000000000L( end.tv_nsec- start.tv
nsec);

Test Case Results
Test CaseType InputSize Target ExecTime( ns) ResultIndex
1 Stylish 0 5 2067-1
2 Stylish 1 5 1353 0
Test CaseType InputSize Target ExecTime( ns) ResultIndex
3 Stylish 5 0 664 2
4 Stylish 9 5 469 4
5 Stylish 6 1 673 2
6 Worst 1000-5 2693-1
7 Worst 100020002276-1
8 Worst 10009991754998
9 Worst 9 10 1056-1
10 Worst 5 50 548-1
11 Average 9 2 500 1
12 Average 9 8 496 7
13 Average 5-5 765 1
14 Average 1000500530499
15 Average 10007501215749
Performance Graph
compliances
Best- case occurs when target is at the middle( O( 1)). Worst- case and average- case grow logarithmically
with input size( O( log n)). double Hunt handles duplicates and negative figures rightly when array is
sorted. prosecution times( ns) recorded using clock_gettime give high- resolution measures.
Conclusion double Hunt is an effective algorithm for searching in sorted arrays with O( log n) time
complexity.



